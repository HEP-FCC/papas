//
//  Created by Alice Robson on 29/11/15.
//
//
#ifndef DISPLAY_COREDISPLAY_H
#define DISPLAY_COREDISPLAY_H

#include <unordered_map>
#include <list>
#include <string>

#include "TCanvas.h"
#include "TH1.h"
#include "TH2F.h"



class ViewPane;
class Drawable;

class Display {
public:
   Display(std::list<std::string> views={}) ;
   void Register(std::shared_ptr<Drawable> obj, int layer, bool clearable=true);
   void Clear();
   void Unzoom();
   void Draw() const;
private:
   std::unordered_map<std::string, std::unique_ptr<ViewPane>> m_views;
};



//AJRTODO
/*void Display::save(self, outdir, filetype='png'):
 os.mkdir(outdir)
 for view in m_views.values():
 view.save(outdir, filetype)
 ViewPane::      */

class ViewPane{
public:
   ViewPane(std::string name, std::string projection, int nx, double xmin, double xmax, int ny, double ymin, double ymax,
            int dx=600, int dy=600);
   
   void Register(std::shared_ptr<Drawable> obj, int layer,bool clearable=true);
   void Clear();
   void Draw();
   void Zoom(double xmin, double xmax, double ymin,double  ymax);
   void Unzoom();
   
   static int nviews;
private:
   std::vector<std::pair<std::shared_ptr<Drawable>, int>> m_registered; //use this instead of a map so that we can sort on the values (=layer)
   std::vector<std::pair<std::shared_ptr<Drawable>, int>> m_locked;
   TCanvas m_canvas;
   TH2F m_hist;
   std::string m_projection;
   
}  ;

//Static variable
int ViewPane::nviews=0;

#endif

//AJRTODO void   ViewPane::save(std::string outdir, ?? filetype):
/*
 fname = '{outdir}/{name}.{filetype}'.format(outdir=outdir,
 name=m_canvas.GetName(),
 filetype=filetype)
 canvas.SaveAs(fname)
 */